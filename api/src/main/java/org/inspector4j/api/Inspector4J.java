package org.inspector4j.api;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.inspector4j.Factory;
import org.inspector4j.Inspector;
import org.inspector4j.api.configuration.Configuration;
import org.inspector4j.api.configuration.InspectorConfiguration;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;
import java.net.URL;
import java.util.*;

public final class Inspector4J {

    private static Inspector main;
    private static Factory factory;
    private static Configuration configuration;
    private static final Object lock = new Object();

    private static boolean startedUp = Boolean.FALSE;
    private static final Map<String, Inspector> cache = new HashMap<>();

    private static final Logger LOGGER = LogManager.getLogger(Inspector4J.class);

    private static void init() {
        try {

            URL url = Inspector4J.class.getClassLoader().getResource("inspector4j.xml");

            LOGGER.info("Initializing Inspector4j with {}", url == null ? null : url.toExternalForm());

            InputStream io = url == null ? null : url.openStream();

            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug(io == null ? "{} stream couldn't be opened" : "{} stream  has been opened", url == null ? null : url.toExternalForm());
            }

            if (io != null) {
                JAXBContext jaxbContext = JAXBContext.newInstance(Configuration.class);
                Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
                Inspector4J.configuration = (Configuration) jaxbUnmarshaller.unmarshal(io);

                LOGGER.info("Configuration {} parsed from {}", Inspector4J.configuration, url.toExternalForm());

            } else {
                InspectorConfiguration rootConfiguration = new InspectorConfiguration();
                rootConfiguration.setScope(Scope.ATTRIBUTE);
                rootConfiguration.setDynamic(Boolean.FALSE);

                Inspector4J.configuration = new Configuration();
                configuration.setRoot(rootConfiguration);
                configuration.setInspectors(Collections.emptyList());

                LOGGER.info("Configuration {} generated by default", Inspector4J.configuration);
            }

            Iterator<Factory> iterator = ServiceLoader.load(Factory.class).iterator();

            if (!iterator.hasNext()) {
                throw new Inspect4JException("Couldn't initialize due to " + Factory.class.getName() + " implementation absence");
            }

            Inspector4J.factory = iterator.next();

            LOGGER.info(factory.getClass() + " initialized as " + Factory.class.getName() + " implementation");

        } catch (Inspect4JException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new Inspect4JException("Couldn't initialize due to an error", ex);
        }
    }

    public static Inspector get() {
        return of(null);
    }

    public static Inspector get(String name) {
        return of(null);
    }

    public static Inspector get(Class<?> type) {
        return type == null ? get() : of(type.getName());
    }

    public static Inspector of(String name) {

        if (!startedUp) {

            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Inspector4J hasn't been initialized...");
            }

            init();

            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Inspector4J has been initialized...");
            }

            startedUp = Boolean.TRUE;
        }

        Inspector instance = name == null || name.trim().isEmpty() ? null : cache.get(name);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(instance == null ? "No " + Inspector.class.getName() + " cached for " + name : instance.getClass() + " cached for " + name);
        }

        if (instance != null) {
            return instance;
        }

        if (name == null || name.trim().isEmpty()) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug(main == null ? "Default  " + Inspector.class.getName() + " is absent and will be built " + name : "Default  " + Inspector.class.getName() + " is present as " + main.getClass());
            }
            return main == null ? createRoot() : main;
        }

        instance = cache.get(name);

        if (instance == null) {
            synchronized (lock) {
                instance = cache.get(name);

                if (instance != null) {
                    return instance;
                }

                InspectorConfiguration config = configuration.getInspectors().stream().filter(each -> each.getName().equals(name)).findFirst().map(each -> (InspectorConfiguration) each).orElse(configuration.getRoot());

                instance = factory.create(config);

                cache.put(name, instance);

                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug(instance.getClass() + " built for " + name);
                }

            }
        }

        return instance;
    }

    private synchronized static Inspector createRoot() {

        if (main != null) {
            return main;
        }

        main = factory.create(configuration.getRoot());

        return main;

    }

}
